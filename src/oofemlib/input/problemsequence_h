// Originated from OOFEM (https://github.com/oofem/oofem)
// License: GNU Lesser General Public
// Modified by CY Li

#ifndef problemsequence_h
#define problemsequence_h

#include "engng/engngm.h"
#include "input/inputrecord.h"

///@name Input fields for ProblemSequence
//@{
#define _IFT_ProblemSequence_Name "problemsequence"
#define _IFT_ProblemSequence_engineeringModels "engngms"
//@}

namespace oofem {
class Function;

/**
 * Meta-engineering problem used to solve a sequence off different problems, all using the same domain.
 * For example, a static deformation followed
 *
 * @todo This class is far from finished and is still lacking vital functionality. It does not work yet.
 *
 * @author Mikael Ã–hman
 */
class OOFEM_EXPORT ProblemSequence : public EngngModel
{
protected:
    /// List of engineering models to solve sequentially.
    std :: vector< std :: unique_ptr< EngngModel > >emodelList;
    std :: vector< std :: string >inputStreamNames;

    /// Keeps track of the active model in the analysis sequence.
    int activeModel;

public:
    /// Constructor
    ProblemSequence(int i, EngngModel *master=nullptr);
    /// Destructor.
    virtual ~ProblemSequence();

    ProblemSequence(const ProblemSequence &) = delete;
    ProblemSequence & operator=(const ProblemSequence &) = delete;

    EngngModel & giveActiveModel() { return *emodelList[activeModel]; }

    void solveYourself() override;

    //virtual void initializeYourself(TimeStep *tStep);
    int instanciateYourself(DataReader &dr, InputRecord &ir, const char *outFileName, const char *desc) override;
    void initializeFrom(InputRecord &ir) override;
    int checkProblemConsistency() override;

    void saveContext(DataStream &stream, ContextMode mode) override;
    void restoreContext(DataStream &stream, ContextMode mode) override;

    // identification
    const char *giveClassName() const override { return "ProblemSequence"; }
    const char *giveInputRecordName() const { return _IFT_ProblemSequence_Name; }

    EngngModel *giveSlaveProblem(int i) override { return NULL; }
    int giveNumberOfSlaveProblems() override { return 0; }

    int instanciateDefaultMetaStep(InputRecord &ir) override { return 1; }
};
} // end namespace oofem
#endif // problemsequence_h
