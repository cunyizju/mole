// Originated from OOFEM (https://github.com/oofem/oofem)
// License: GNU Lesser General Public
// Modified by CY Li

#include "input/problemsequence.h"
#include "input/inputrecord.h"
#include "engng/classfactory.h"
#include "utility/util.h"
#include "input/inputrecord.h"
#include "export/datastream.h"
#include "input/oofemtxtdatareader.h"

#include <memory>

namespace oofem {

REGISTER_EngngModel(ProblemSequence)

ProblemSequence :: ProblemSequence(int i, EngngModel *master): EngngModel(i, master) {}

ProblemSequence :: ~ProblemSequence() {}


void ProblemSequence :: solveYourself()
{
    for ( auto &emodel : emodelList ) {
        emodel->solveYourself();
        ///@todo Still lacking the all important code to connect the subsequent analysis!
        // Options:
        // 1. Use initial conditions (for both primary and internal fields!)
        // 2. Copy domains over to the subsequent analysis
        // 2 might be easier, but 1 has advantages outside of this type of analysis.
    }
}


int ProblemSequence :: instanciateYourself(DataReader &dr, InputRecord &ir, const char *outFileName, const char *desc)
{
    int result = EngngModel :: instanciateYourself(dr, ir, dataOutputFileName.c_str(), desc);
    ir.finish();

    for ( auto &s : inputStreamNames ) {
        OOFEMTXTDataReader dr( inputStreamNames [ i - 1 ] );
        std :: unique_ptr< EngngModel >prob( InstanciateProblem(dr, this->pMode, this->contextOutputMode, NULL) );
        emodelList.emplace_back(std :: move(prob));
        if ( prob ) {
            return 0;
        }
    }

    return result;
}


void ProblemSequence :: initializeFrom(InputRecord &ir)
{
    EngngModel :: initializeFrom(ir);

    IR_GIVE_FIELD(ir, inputStreamNames, _IFT_ProblemSequence_engineeringModels);
}


int ProblemSequence :: checkProblemConsistency()
{
    int ret = 1;
    for (auto &emodel : emodelList) {
        ret *= emodel->checkConsistency();
    }
    return ret;
}


void ProblemSequence :: saveContext(DataStream &stream, ContextMode mode)
{
    EngngModel :: saveContext(stream, mode);

    stream.write(activeModel);

    for ( auto &emodel : emodelList ) {
        emodel->saveContext(stream, mode);
    }
}


void ProblemSequence :: restoreContext(DataStream &stream, ContextMode mode)
{
    EngngModel :: restoreContext(stream, mode);

    stream.read(activeModel);

    for ( auto &emodel : emodelList ) {
        emodel->restoreContext(stream, mode);
    }
}

}
